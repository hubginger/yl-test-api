pc:
  authType: usernamePassword
  idType: USERNAME
  loginId: test_admin
  password: dc483e80a7a0bd9ef71d8cf973673924
  verifyCode: 8844.43
  verifyId: ++++
  # 前端调用后端 verify 接口时, 后端生成, 响应给前端 id
  # 前端根据 code 校验页面, 阻止提交, 8844.43 不阻止
  # 登录时, 要拿着 verify 响应的 id 进行登录, 该 id 应是存在缓存服务器中的.
  # 缓存服务器中存储 verify_id 的逻辑是怎样的, 是否可以跳过调用接口, 我们自己写实现逻辑, ( 应该是不行的, 往缓存塞值, 不比直接调接口方便 )

app:
  authType: usernamePassword
  idType: USERNAME
  loginId: test_admin
  password: dc483e80a7a0bd9ef71d8cf973673924

public:
  loginId: 18888888888
  canVerifyCode: false
  password: dc483e80a7a0bd9ef71d8cf973673924
  idType: USERNAME
  userType: PUBLIC_USER

mini:
  # 小程序最麻烦, 当前未实现, 需找开发支持
  ----

password: dc483e80a7a0bd9ef71d8cf973673924


# 登录时, 按照 _ 切割, 根据第一个取参数格式, 根据全部取登录的 url :
pc_a: https://a-test.yljk.cn/api/yft/auth/system_user/username_pwd/sign_in
pc_c: https://crm-test.yljt.cn/api/crm/auth/system_user/username_pwd/sign_in
pc_h: https://h-test.yljk.cn/api/yft/auth/system_user/username_pwd/sign_in
app_h: https://h-test.yljt.cn/api/yft/user/agency_user/username_pwd/sign_in
public_h: https://h-test.yljt.cn/api/yft/user/public_user/sign_in



# 关于 verifyId :
#     前端调用后端 verify 接口时, 后端生成, 响应给前端 id
#     前端根据 code 校验页面, 阻止提交, 8844.43 不阻止
#     登录时, 要拿着 verify 响应的 id 进行登录, 该 id 应是存在缓存服务器中的.
#     缓存服务器中存储 verify_id 的逻辑是怎样的, 是否可以跳过调用接口, 我们自己写实现逻辑

# 关于 password :
#     当前都是 a123456 通过 md5 加密得到 dc483e80a7a0bd9ef71d8cf973673924
#     因此此处写死 dc483e80a7a0bd9ef71d8cf973673924, 当然可以在代码中通过传参修改
